# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AvatarUpdateInput {
  avatar: String!
}

type AvatarUpdateOutput {
  error: ErrorType!
  user: User
}

union Definition = PhraseDefinition | WordDefinition

input EmailResponseInput {
  token: String!
}

type EmailResponseOutput {
  error: ErrorType!
}

enum ErrorType {
  AvatarNotFound
  AvatarTooLong
  AvatarTooShort
  AvatarUnavailable
  CandidateNotFound
  CandidateNotFoundInBallot
  ElectionNotFound
  EmailInvalid
  EmailIsBlocked
  EmailNotFound
  EmailTooLong
  EmailTooShort
  EmailUnavailable
  InvalidEmailOrPassword
  InvalidInputs
  LimitInvalid
  NoError
  OffsetInvalid
  ParentElectionNotFound
  PasswordInvalid
  PasswordTooLong
  PasswordTooShort
  PhraseDefinitionNotFound
  PhraseNotFound
  PositionInvalid
  PostCreateFailed
  PrefixInvalid
  PrefixTooLong
  PrefixTooShort
  RankInvalid
  RankUnchanged
  SiteTextTranslationNotFound
  TokenInvalid
  Unauthorized
  UnknownError
  WordDefinitionNotFound
  WordInsertFailed
  WordLikeStringInsertFailed
  WordNotFound
}

input FileUploadUrlRequest {
  user_id: ID!
}

type FileUploadUrlResponse {
  avatar_image_url: String!
  error: ErrorType!
  url: String!
}

input FromPhraseAndDefintionlikeStringUpsertInput {
  definitionlike_string: String!
  dialect_code: String
  geo_code: String
  language_code: String!
  phraselike_string: String!
}

input FromWordAndDefintionlikeStringUpsertInput {
  definitionlike_string: String!
  dialect_code: String
  geo_code: String
  language_code: String!
  wordlike_string: String!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginOutput {
  error: ErrorType!
  session: Session
}

input LogoutInput {
  token: String!
}

type LogoutOutput {
  error: ErrorType!
}

input MapFileInput {
  mapFile: Upload!
}

type MapFileOutput {
  map_file_name: String!
  original_map_id: ID!
}

type Mutation {
  avatarUpdateResolver(input: AvatarUpdateInput!): AvatarUpdateOutput!
  emailResponseResolver(input: EmailResponseInput!): EmailResponseOutput!
  login(input: LoginInput!): LoginOutput!
  logout(input: LogoutInput!): LogoutOutput!
  mapUpload(input: MapFileInput!): MapFileOutput!
  passwordResetFormResolver(input: PasswordResetFormInput!): LoginOutput!
  phraseDefinitionUpsert(input: PhraseDefinitionUpsertInput!): PhraseDefinitionUpsertOutput!
  phraseUpsert(input: PhraseUpsertInput!): PhraseUpsertOutput!
  postCreateResolver(input: PostCreateInput!): PostCreateOutput!
  register(input: RegisterInput!): RegisterOutput!
  resetEmailRequest(input: ResetEmailRequestInput!): ResetEmailRequestOutput!
  siteTextPhraseDefinitionUpsert(input: SiteTextPhraseDefinitionUpsertInput!): SiteTextPhraseDefinitionUpsertOutput!
  siteTextTranslationUpsert(input: SiteTextTranslationInput!): SiteTextTranslationUpsertOutput!
  siteTextUpsert(input: SiteTextUpsertInput!): SiteTextUpsertOutput!
  siteTextWordDefinitionUpsert(input: SiteTextWordDefinitionUpsertInput!): SiteTextWordDefinitionUpsertOutput!
  upsertFromTranslationlikeString: SiteTextTranslationUpsertOutput!
  upsertPhraseDefinitionFromPhraseAndDefinitionlikeString(input: FromPhraseAndDefintionlikeStringUpsertInput!): PhraseDefinitionUpsertOutput!
  upsertWordDefinitionFromWordAndDefinitionlikeString(input: FromWordAndDefintionlikeStringUpsertInput!): WordDefinitionUpsertOutput!
  versionCreateResolver(input: VersionCreateInput!): VersionCreateOutput!
  wordDefinitionUpsert(input: WordDefinitionUpsertInput!): WordDefinitionUpsertOutput!
  wordUpsert(input: WordUpsertInput!): WordUpsertOutput!
}

input PasswordResetFormInput {
  password: String!
  token: String!
}

type Phrase {
  phrase: String!
  phrase_id: ID!
}

type PhraseDefinition {
  definition: String!
  phrase: Phrase!
  phrase_definition_id: ID!
}

type PhraseDefinitionReadOutput {
  error: ErrorType!
  phrase_definition: PhraseDefinition
}

input PhraseDefinitionUpsertInput {
  definition: String!
  phrase_id: ID!
}

type PhraseDefinitionUpsertOutput {
  error: ErrorType!
  phrase_definition: PhraseDefinition
}

input PhraseReadInput {
  phrase_id: ID!
}

type PhraseReadOutput {
  error: ErrorType!
  phrase: Phrase
}

input PhraseUpsertInput {
  dialect_code: String
  geo_code: String
  language_code: String!
  phraselike_string: String!
}

type PhraseUpsertOutput {
  error: ErrorType!
  phrase: Phrase
}

type Post {
  created_at: String!
  created_by: Int!
  post_id: ID!
}

input PostCreateInput {
  content: String!
  parent_id: Int
}

type PostCreateOutput {
  error: ErrorType!
  post: Post
}

input PostReadInput {
  post_id: ID!
}

type PostReadOutput {
  error: ErrorType!
  post: Post
}

type Query {
  fileUploadUrlRequest(input: FileUploadUrlRequest!): FileUploadUrlResponse!
  phraseDefinitionRead(id: ID!): PhraseDefinitionReadOutput!
  phraseRead(input: PhraseReadInput!): PhraseReadOutput!
  postReadResolver(input: PostReadInput!): PostReadOutput!
  siteTextPhraseDefinitionRead(id: String!): SiteTextPhraseDefinitionReadOutput!
  siteTextTranslationRead(id: String!): SiteTextTranslationReadOutput!
  siteTextWordDefinitionRead(id: String!): SiteTextWordDefinitionReadOutput!
  userReadResolver(input: UserReadInput!): UserReadOutput!
  wordDefinitionRead(id: ID!): WordDefinitionReadOutput!
  wordRead(input: WordReadInput!): WordReadOutput!
}

input RegisterInput {
  avatar: String!
  email: String!
  password: String!
}

type RegisterOutput {
  error: ErrorType!
  session: Session
}

input ResetEmailRequestInput {
  email: String!
}

type ResetEmailRequestOutput {
  error: ErrorType!
}

type Session {
  avatar: String!
  avatar_url: String
  token: String!
  user_id: ID!
}

type SiteTextPhraseDefinition {
  phrase_definition: PhraseDefinition!
  site_text_id: ID!
}

type SiteTextPhraseDefinitionReadOutput {
  error: ErrorType!
  site_text_phrase_definition: SiteTextPhraseDefinition
}

input SiteTextPhraseDefinitionUpsertInput {
  phrase_definition_id: ID!
}

type SiteTextPhraseDefinitionUpsertOutput {
  error: ErrorType!
  site_text_phrase_definition: SiteTextPhraseDefinition
}

type SiteTextTranslation {
  from_definition: Definition!
  from_type_is_word: Boolean!
  site_text_translation_id: ID!
  to_definition: Definition!
  to_type_is_word: Boolean!
}

input SiteTextTranslationInput {
  from_definition_id: ID!
  from_type_is_word: Boolean!
  to_definition_id: ID!
  to_type_is_word: Boolean!
}

type SiteTextTranslationReadOutput {
  error: ErrorType!
  site_text_translation: SiteTextTranslation
}

type SiteTextTranslationUpsertOutput {
  error: ErrorType!
  site_text_translation: SiteTextTranslation
}

input SiteTextUpsertInput {
  definitionlike_string: String!
  dialect_code: String
  geo_code: String
  language_code: String!
  siteTextlike_string: String!
}

type SiteTextUpsertOutput {
  error: ErrorType!
  site_text_phrase_definition: SiteTextPhraseDefinition
  site_text_word_definition: SiteTextWordDefinition
}

type SiteTextWordDefinition {
  site_text_id: ID!
  word_definition: WordDefinition!
}

type SiteTextWordDefinitionReadOutput {
  error: ErrorType!
  site_text_word_definition: SiteTextWordDefinition
}

input SiteTextWordDefinitionUpsertInput {
  word_definition_id: ID!
}

type SiteTextWordDefinitionUpsertOutput {
  error: ErrorType!
  site_text_word_definition: SiteTextWordDefinition
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  avatar: String!
  avatar_url: String
  user_id: ID!
}

input UserReadInput {
  user_id: ID!
}

type UserReadOutput {
  error: ErrorType!
  user: User
}

type Version {
  content: String!
  created_at: String!
  license_title: String!
  post_id: Int!
  version_id: ID!
}

input VersionCreateInput {
  content: String!
  license_title: String!
  post_id: Int!
}

type VersionCreateOutput {
  error: ErrorType!
  version: Version
}

type Word {
  dialect_code: String
  geo_code: String
  language_code: String!
  word: String!
  word_id: ID!
}

type WordDefinition {
  definition: String!
  word: Word!
  word_definition_id: ID!
}

type WordDefinitionReadOutput {
  error: ErrorType!
  word_definition: WordDefinition
}

input WordDefinitionUpsertInput {
  definition: String!
  word_id: ID!
}

type WordDefinitionUpsertOutput {
  error: ErrorType!
  word_definition: WordDefinition
}

input WordReadInput {
  word_id: ID!
}

type WordReadOutput {
  error: ErrorType!
  word: Word
}

input WordUpsertInput {
  dialect_code: String
  geo_code: String
  language_code: String!
  wordlike_string: String!
}

type WordUpsertOutput {
  error: ErrorType!
  word: Word
}