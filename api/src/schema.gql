# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddNotificationInput {
  text: String!
  user_id: ID!
}

type AddNotificationOutput {
  error: ErrorType!
  notification: Notification
}

type Answer {
  answer: String
  answer_id: ID!
  created_at: DateTime!
  created_by: String!
  question_id: String!
  question_items: [QuestionItem!]!
}

input AnswerUpsertInput {
  answer: String!
  question_id: ID!
  question_item_ids: [String!]!
}

type AnswersOutput {
  answers: [Answer]!
  error: ErrorType!
}

input AvatarUpdateInput {
  avatar: String!
}

type AvatarUpdateOutput {
  error: ErrorType!
  user: User
}

enum BotType {
  DeepL
  GPT4
  GPT35
  Google
  Lilt
  Smartcat
}

input CreateQuestionOnWordRangeUpsertInput {
  begin_document_word_entry_id: ID!
  end_document_word_entry_id: ID!
  question: String!
  question_items: [String!]!
  question_type_is_multiselect: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DefinitionUpdateaInput {
  definition_id: ID!
  definition_type_is_word: Boolean!
  definitionlike_string: String!
}

type DefinitionVoteStatus {
  definition_id: ID!
  downvotes: Int!
  upvotes: Int!
}

type DefinitionVoteStatusOutputRow {
  error: ErrorType!
  vote_status: DefinitionVoteStatus
}

input DocumentUploadInput {
  document: TextyDocumentInput!
}

type DocumentUploadOutput {
  document: TextyDocument
  error: ErrorType!
}

type DocumentWordEntriesOutput {
  document_word_entries: [DocumentWordEntry]!
  error: ErrorType!
}

type DocumentWordEntry {
  document_id: String!
  document_word_entry_id: ID!
  parent_document_word_entry_id: String
  wordlike_string: WordlikeString!
}

input EmailResponseInput {
  token: String!
}

type EmailResponseOutput {
  error: ErrorType!
}

enum ErrorType {
  AnswerInsertFailed
  AvatarNotFound
  AvatarTooLong
  AvatarTooShort
  AvatarUnavailable
  BotTranslationBotNotFound
  BotTranslationError
  BotTranslationLanguagesListError
  CandidateNotFound
  CandidateNotFoundInBallot
  DocumentEntryReadError
  DocumentIdNotProvided
  DocumentNotFound
  DocumentWordEntryAlreadyExists
  DocumentWordEntryInsertFailed
  DocumentWordEntryNotFound
  ElectionNotFound
  EmailInvalid
  EmailIsBlocked
  EmailNotFound
  EmailTooLong
  EmailTooShort
  EmailUnavailable
  FileDeleteFailed
  FileNotExists
  FileSaveFailed
  FileWithFilenameAlreadyExists
  FolderForThreadNotExists
  FolderIdNotDefined
  ForumDeleteFailed
  ForumFolderDeleteFailed
  ForumFolderUpsertFailed
  ForumForFolderNotExists
  ForumUpsertFailed
  InvalidEmailOrPassword
  InvalidInputs
  LimitInvalid
  MapDeletionError
  MapFilenameAlreadyExists
  MapInsertFailed
  MapNotFound
  MapVoteNotFound
  MapWordsAndPhrasesSearchError
  MapZippingError
  NoError
  NotificationDeleteFailed
  NotificationInsertFailed
  OffsetInvalid
  PaginationError
  ParentElectionNotFound
  PasswordInvalid
  PasswordTooLong
  PasswordTooShort
  PericopeInsertFailed
  PericopeNotFound
  PericopeVoteToggleFailed
  PhraseDefinitionAlreadyExists
  PhraseDefinitionNotFound
  PhraseDefinitionVoteNotFound
  PhraseNotFound
  PhraseToPhraseTranslationNotFound
  PhraseToWordTranslationNotFound
  PhraseVoteNotFound
  PositionInvalid
  PostCreateFailed
  PostNotFound
  PrefixInvalid
  PrefixTooLong
  PrefixTooShort
  ProvidedIdIsMalformed
  QuestionInsertFailed
  QuestionItemInsertFailed
  RankInvalid
  RankUnchanged
  SiteTextPhraseDefinitionAlreadyExists
  SiteTextPhraseDefinitionNotFound
  SiteTextWordDefinitionAlreadyExists
  SiteTextWordDefinitionNotFound
  ThreadUpsertFailed
  TokenInvalid
  Unauthorized
  UnknownError
  WordDefinitionAlreadyExists
  WordDefinitionNotFound
  WordDefinitionVoteNotFound
  WordInsertFailed
  WordLikeStringInsertFailed
  WordNotFound
  WordRangeInsertFailed
  WordToPhraseTranslationNotFound
  WordToWordTranslationNotFound
  WordVoteNotFound
}

input FileUploadUrlRequest {
  user_id: ID!
}

type FileUploadUrlResponse {
  avatar_image_url: String!
  error: ErrorType!
  url: String!
}

type Flag {
  created_at: String!
  created_by: ID!
  flag_id: ID!
  name: FlagType!
  parent_id: ID!
  parent_table: String!
}

enum FlagType {
  FastTranslation
}

type FlagsOutput {
  error: ErrorType!
  flags: [Flag!]!
}

type Forum {
  forum_id: ID!
  name: String!
}

input ForumDeleteInput {
  forum_id: ID!
}

type ForumDeleteOutput {
  error: ErrorType!
  forum_id: ID!
}

type ForumFolder {
  folder_id: ID!
  name: String!
}

input ForumFolderDeleteInput {
  folder_id: ID!
}

type ForumFolderDeleteOutput {
  error: ErrorType!
  folder_id: ID!
}

input ForumFolderListInput {
  forum_id: ID!
}

type ForumFolderListOutput {
  error: ErrorType!
  folders: [ForumFolder!]!
}

input ForumFolderReadInput {
  folder_id: ID!
}

type ForumFolderReadOutput {
  error: ErrorType!
  folder: ForumFolder
}

input ForumFolderUpsertInput {
  folder_id: ID
  forum_id: ID!
  name: String!
}

type ForumFolderUpsertOutput {
  error: ErrorType!
  folder: ForumFolder
}

type ForumListOutput {
  error: ErrorType!
  forums: [Forum!]!
}

input ForumReadInput {
  forum_id: ID!
}

type ForumReadOutput {
  error: ErrorType!
  forum: Forum
}

input ForumUpsertInput {
  forum_id: ID
  name: String!
}

type ForumUpsertOutput {
  error: ErrorType!
  forum: Forum
}

input FromPhraseAndDefintionlikeStringUpsertInput {
  definitionlike_string: String!
  dialect_code: String
  geo_code: String
  language_code: String!
  phraselike_string: String!
}

input FromWordAndDefintionlikeStringUpsertInput {
  definitionlike_string: String!
  dialect_code: String
  geo_code: String
  language_code: String!
  wordlike_string: String!
}

type GenericOutput {
  error: ErrorType!
}

input GetAllDocumentsInput {
  lang: LanguageInput
}

type GetAllDocumentsOutput {
  documents: [TextyDocument!]
  error: ErrorType!
}

input GetAllMapsListInput {
  lang: LanguageInput
}

input GetDocumentInput {
  document_id: String!
}

type GetDocumentOutput {
  document: TextyDocument
  error: ErrorType!
}

input GetMapDetailsInput {
  is_original: Boolean!
  map_id: ID!
}

input GetMapWordOrPhraseByDefinitionIdInput {
  definition_id: ID!
  is_word_definition: Boolean!
}

input GetOrigMapListInput {
  search: String
}

input GetOrigMapWordsAndPhrasesInput {
  filter: String
  isSortDescending: Boolean
  lang: LanguageInput!
  onlyNotTranslatedTo: LanguageInput
  onlyTranslatedTo: LanguageInput
  original_map_id: String
  quickFilter: String
}

type GetOrigMapsListOutput {
  mapList: [MapDetailsOutput!]!
}

type IFile {
  fileHash: String!
  fileName: String!
  fileSize: Int!
  fileType: String!
  fileUrl: String!
  id: Int!
}

type IFileOutput {
  error: ErrorType!
  file: IFile
}

input IsAdminIdInput {
  user_id: ID!
}

type IsAdminIdOutput {
  isAdmin: Boolean!
}

type LanguageForBotTranslate {
  code: String!
  name: String!
}

input LanguageInput {
  dialect_code: String
  filter: String
  geo_code: String
  language_code: String!
}

type LanguageListForBotTranslateOutput {
  error: ErrorType!
  languages: [LanguageForBotTranslate!]
}

type LanguageOutput {
  dialect_code: String
  geo_code: String
  language_code: String!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginOutput {
  error: ErrorType!
  session: Session
}

input LogoutInput {
  token: String!
}

type LogoutOutput {
  error: ErrorType!
}

input MapDeleteInput {
  is_original: Boolean!
  mapId: String!
}

type MapDeleteOutput {
  deletedMapId: String
  error: ErrorType!
}

type MapDetailsInfo {
  content_file_id: ID!
  content_file_url: ID!
  created_at: String!
  created_by: ID!
  is_original: Boolean!
  language: LanguageOutput!
  map_file_name: String!
  map_file_name_with_langs: String!
  original_map_id: ID!
  preview_file_id: ID
  preview_file_url: ID
  translated_map_id: ID
  translated_percent: String
}

type MapDetailsOutput {
  error: ErrorType!
  mapDetails: MapDetailsInfo
}

type MapDetailsOutputEdge {
  cursor: ID!
  node: MapDetailsOutput!
}

type MapListConnection {
  edges: [MapDetailsOutputEdge!]!
  pageInfo: PageInfo!
}

type MapUploadOutput {
  error: ErrorType!
  mapDetailsOutput: MapDetailsOutput
}

type MapVote {
  is_original: Boolean!
  last_updated_at: DateTime!
  map_id: ID!
  maps_vote_id: ID!
  user_id: ID!
  vote: Boolean!
}

type MapVoteOutput {
  error: ErrorType!
  map_vote: MapVote
}

type MapVoteStatus {
  downvotes: Int!
  is_original: Boolean!
  map_id: ID!
  upvotes: Int!
}

type MapVoteStatusOutputRow {
  error: ErrorType!
  vote_status: MapVoteStatus
}

input MapVoteUpsertInput {
  is_original: Boolean!
  map_id: ID!
  vote: Boolean!
}

type MapWordOrPhrase {
  id: ID!
  o_created_at: DateTime!
  o_created_by_user: User!
  o_definition: String!
  o_definition_id: String!
  o_dialect_code: String
  o_geo_code: String
  o_id: String!
  o_language_code: String!
  o_like_string: String!
  type: String!
}

union MapWordOrPhraseAsOrig = PhraseWithDefinition | WordWithDefinition

type MapWordOrPhraseAsOrigOutput {
  error: ErrorType!
  wordOrPhrase: MapWordOrPhraseAsOrig
}

type MapWordsAndPhrasesConnection {
  edges: [MapWordsAndPhrasesEdge!]!
  error: ErrorType!
  pageInfo: PageInfo!
}

type MapWordsAndPhrasesCountOutput {
  count: Float
  error: ErrorType!
}

type MapWordsAndPhrasesEdge {
  cursor: ID!
  node: MapWordOrPhrase!
}

input MarkNotificationReadInput {
  notification_id: ID!
}

type MarkNotificationReadOutput {
  error: ErrorType!
  notification_id: ID!
}

type Mutation {
  addNotification(input: AddNotificationInput!): AddNotificationOutput!
  avatarUpdateResolver(input: AvatarUpdateInput!): AvatarUpdateOutput!
  createQuestionOnWordRange(input: CreateQuestionOnWordRangeUpsertInput!): QuestionOnWordRangesOutput!
  documentUpload(input: DocumentUploadInput!): DocumentUploadOutput!
  emailResponseResolver(input: EmailResponseInput!): EmailResponseOutput!
  forumDelete(input: ForumDeleteInput!): ForumDeleteOutput!
  forumFolderDelete(input: ForumFolderDeleteInput!): ForumFolderDeleteOutput!
  forumFolderUpsert(input: ForumFolderUpsertInput!): ForumFolderUpsertOutput!
  forumUpsert(input: ForumUpsertInput!): ForumUpsertOutput!
  login(input: LoginInput!): LoginOutput!
  logout(input: LogoutInput!): LogoutOutput!
  mapDelete(input: MapDeleteInput!): MapDeleteOutput!
  mapUpload(file: Upload!, file_size: Int!, file_type: String!, previewFileId: String): MapUploadOutput!
  mapVoteUpsert(input: MapVoteUpsertInput!): MapVoteOutput!
  mapsReTranslate(forLangTag: String): GenericOutput!
  mapsTranslationsReset: GenericOutput!
  markNotificationAsRead(input: MarkNotificationReadInput!): MarkNotificationReadOutput!
  notificationDelete(input: NotificationDeleteInput!): NotificationDeleteOutput!
  notifyUsers(input: NotifyUsersInput!): AddNotificationOutput!
  passwordResetFormResolver(input: PasswordResetFormInput!): LoginOutput!
  phraseDefinitionUpsert(input: PhraseDefinitionUpsertInput!): PhraseDefinitionOutput!
  phraseToPhraseTranslationUpsert(input: PhraseToPhraseTranslationUpsertInput!): PhraseToPhraseTranslationOutput!
  phraseUpsert(input: PhraseUpsertInput!): PhraseOutput!
  phraseVoteUpsert(input: PhraseVoteUpsertInput!): PhraseVoteOutput!
  postCreateResolver(input: PostCreateInput!): PostCreateOutput!
  register(input: RegisterInput!): RegisterOutput!
  resetEmailRequest(input: ResetEmailRequestInput!): ResetEmailRequestOutput!
  siteTextPhraseDefinitionUpsert(phrase_definition_id: ID!): SiteTextPhraseDefinitionOutput!
  siteTextUpsert(input: SiteTextUpsertInput!): SiteTextDefinitionOutput!
  siteTextWordDefinitionUpsert(word_definition_id: ID!): SiteTextWordDefinitionOutput!
  startZipMapDownload(input: StartZipMapDownloadInput!): StartZipMapOutput!
  stopBotTranslation: GenericOutput!
  threadDelete(input: ThreadDeleteInput!): ThreadDeleteOutput!
  threadUpsert(input: ThreadUpsertInput!): ThreadUpsertOutput!
  toggleFlagWithRef(name: String!, parent_id: String!, parent_table: TableNameType!): FlagsOutput!
  toggleMapVoteStatus(is_original: Boolean!, map_id: ID!, vote: Boolean!): MapVoteStatusOutputRow!
  togglePericopeVoteStatus(pericope_id: ID!, vote: Boolean!): PericopeVoteStatusOutput!
  togglePhraseDefinitionVoteStatus(phrase_definition_id: ID!, vote: Boolean!): DefinitionVoteStatusOutputRow!
  togglePhraseToPhraseTrVoteStatus(phrase_to_phrase_translation_id: ID!, vote: Boolean!): PhraseToPhraseTranslationVoteStatusOutputRow!
  togglePhraseToWordTrVoteStatus(phrase_to_word_translation_id: ID!, vote: Boolean!): PhraseToWordTranslationVoteStatusOutputRow!
  togglePhraseVoteStatus(phrase_id: ID!, vote: Boolean!): PhraseVoteStatusOutputRow!
  toggleTranslationVoteStatus(from_definition_type_is_word: Boolean!, to_definition_type_is_word: Boolean!, translation_id: ID!, vote: Boolean!): TranslationVoteStatusOutputRow!
  toggleWordDefinitionVoteStatus(vote: Boolean!, word_definition_id: ID!): DefinitionVoteStatusOutputRow!
  toggleWordToPhraseTrVoteStatus(vote: Boolean!, word_to_phrase_translation_id: ID!): WordToPhraseTranslationVoteStatusOutputRow!
  toggleWordVoteStatus(vote: Boolean!, word_id: ID!): WordVoteStatusOutputRow!
  translateAllWordsAndPhrasesByDeepL(from_language: LanguageInput!): GenericOutput!
  translateAllWordsAndPhrasesByGoogle(from_language: LanguageInput!): GenericOutput!
  translateAllWordsAndPhrasesByLilt(from_language: LanguageInput!): GenericOutput!
  translateAllWordsAndPhrasesBySmartcat(from_language: LanguageInput!): GenericOutput!
  translateMissingWordsAndPhrasesByChatGpt(from_language: LanguageInput!, to_language: LanguageInput!, version: String!): TranslateAllWordsAndPhrasesByBotOutput!
  translateMissingWordsAndPhrasesByDeepL(from_language: LanguageInput!, to_language: LanguageInput!): TranslateAllWordsAndPhrasesByBotOutput!
  translateMissingWordsAndPhrasesByGoogle(from_language: LanguageInput!, to_language: LanguageInput!): TranslateAllWordsAndPhrasesByBotOutput!
  translateMissingWordsAndPhrasesBySmartcat(from_language: LanguageInput!, to_language: LanguageInput!): TranslateAllWordsAndPhrasesByBotOutput!
  translateWordsAndPhrasesByChatGPT4(from_language: LanguageInput!, to_language: LanguageInput!): TranslateAllWordsAndPhrasesByBotOutput!
  translateWordsAndPhrasesByChatGPT35(from_language: LanguageInput!, to_language: LanguageInput!): TranslateAllWordsAndPhrasesByBotOutput!
  translateWordsAndPhrasesByDeepL(from_language: LanguageInput!, to_language: LanguageInput!): TranslateAllWordsAndPhrasesByBotOutput!
  translateWordsAndPhrasesByGoogle(from_language: LanguageInput!, to_language: LanguageInput!): TranslateAllWordsAndPhrasesByBotOutput!
  translateWordsAndPhrasesByLilt(from_language: LanguageInput!, to_language: LanguageInput!): TranslateAllWordsAndPhrasesByBotOutput!
  translateWordsAndPhrasesBySmartcat(from_language: LanguageInput!, to_language: LanguageInput!): TranslateAllWordsAndPhrasesByBotOutput!
  updateDefinition(input: DefinitionUpdateaInput!): PhraseDefinitionOutput!
  updateFile(file: Upload, file_size: Int, file_type: String, id: Int!): IFileOutput!
  uploadFile(file: Upload!, file_size: Int!, file_type: String!): IFileOutput!
  upsertAnswers(input: [AnswerUpsertInput!]!): AnswersOutput!
  upsertFromTranslationlikeString(fromInput: SiteTextTranslationsFromInput!, toInput: SiteTextTranslationsToInput!): TranslationOutput!
  upsertPericopies(startWords: [String!]!): PericopiesOutput!
  upsertPhraseDefinitionFromPhraseAndDefinitionlikeString(input: FromPhraseAndDefintionlikeStringUpsertInput!): PhraseDefinitionOutput!
  upsertQuestionItems(items: [String!]!): QuestionItemsOutput!
  upsertQuestions(input: [QuestionUpsertInput!]!): QuestionsOutput!
  upsertSiteTextTranslation(input: SiteTextTranslationUpsertInput!): TranslationOutput!
  upsertTranslation(from_definition_id: ID!, from_definition_type_is_word: Boolean!, to_definition_id: ID!, to_definition_type_is_word: Boolean!): TranslationOutput!
  upsertTranslationFromWordAndDefinitionlikeString(from_definition_id: ID!, from_definition_type_is_word: Boolean!, to_definition_input: ToDefinitionInput!): TranslationOutput!
  upsertWordDefinitionFromWordAndDefinitionlikeString(input: FromWordAndDefintionlikeStringUpsertInput!): WordDefinitionOutput!
  upsertWordRanges(input: [WordRangeUpsertInput!]!): WordRangesOutput!
  versionCreateResolver(input: VersionCreateInput!): VersionCreateOutput!
  wordDefinitionUpsert(input: WordDefinitionUpsertInput!): WordDefinitionOutput!
  wordToPhraseTranslationUpsert(input: WordToPhraseTranslationUpsertInput!): WordToPhraseTranslationOutput!
  wordToWordTranslationUpsert(input: WordToWordTranslationUpsertInput!): WordToWordTranslationOutput!
  wordUpsert(input: WordUpsertInput!): WordOutput!
  wordVoteUpsert(input: WordVoteUpsertInput!): WordVoteOutput!
}

type Notification {
  id: ID!
  isNotified: Boolean!
  text: String!
}

input NotificationDeleteInput {
  notification_id: ID!
}

type NotificationDeleteOutput {
  error: ErrorType!
  notification_id: ID!
}

type NotificationListOutput {
  error: ErrorType!
  notifications: [Notification!]!
}

input NotifyUsersInput {
  text: String!
  user_ids: [ID!]!
}

type OrigMapWordsAndPhrasesOutput {
  error: ErrorType!
  mapWordsOrPhrases: [MapWordOrPhrase!]
}

type PageInfo {
  endCursor: ID
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: ID
  totalEdges: Int
}

input PasswordResetFormInput {
  password: String!
  token: String!
}

type Pericope {
  pericope_id: ID!
  start_word: String!
}

type PericopeVote {
  last_updated_at: DateTime!
  pericope_id: ID!
  pericope_vote_id: ID!
  user_id: ID!
  vote: Boolean!
}

type PericopeVoteStatus {
  downvotes: Int!
  pericope_id: ID!
  upvotes: Int!
}

type PericopeVoteStatusOutput {
  error: ErrorType!
  vote_status: PericopeVoteStatus
}

type PericopeWithVote {
  downvotes: Int!
  pericope_id: ID!
  start_word: String!
  upvotes: Int!
}

type PericopiesOutput {
  error: ErrorType!
  pericopies: [Pericope]!
}

type Phrase {
  created_at: DateTime!
  created_by_user: User!
  dialect_code: String
  geo_code: String
  language_code: String!
  phrase: String!
  phrase_id: ID!
}

type PhraseDefinition {
  created_at: DateTime!
  created_by_user: User!
  definition: String!
  phrase: Phrase!
  phrase_definition_id: ID!
}

type PhraseDefinitionListConnection {
  edges: [PhraseDefinitionListEdge!]!
  error: ErrorType!
  pageInfo: PageInfo!
}

type PhraseDefinitionListEdge {
  cursor: ID!
  node: PhraseDefinition!
}

type PhraseDefinitionOutput {
  error: ErrorType!
  phrase_definition: PhraseDefinition
}

input PhraseDefinitionUpsertInput {
  definition: String!
  phrase_id: ID!
}

type PhraseDefinitionVote {
  last_updated_at: DateTime!
  phrase_definition_id: ID!
  phrase_definitions_vote_id: ID!
  user_id: ID!
  vote: Boolean!
}

type PhraseDefinitionWithVote {
  created_at: DateTime!
  created_by_user: User!
  definition: String!
  downvotes: Int!
  phrase: Phrase!
  phrase_definition_id: ID!
  upvotes: Int!
}

type PhraseDefinitionWithVoteListOutput {
  error: ErrorType!
  phrase_definition_list: [PhraseDefinitionWithVote]!
}

type PhraseOutput {
  error: ErrorType!
  phrase: Phrase
}

input PhraseReadInput {
  phrase_id: ID!
}

type PhraseToPhraseTranslation {
  from_phrase_definition: PhraseDefinition!
  phrase_to_phrase_translation_id: ID!
  to_phrase_definition: PhraseDefinition!
}

type PhraseToPhraseTranslationOutput {
  error: ErrorType!
  phrase_to_phrase_translation: PhraseToPhraseTranslation
}

input PhraseToPhraseTranslationUpsertInput {
  from_phrase_definition_id: ID!
  to_phrase_definition_id: ID!
}

type PhraseToPhraseTranslationVoteStatus {
  downvotes: Int!
  phrase_to_phrase_translation_id: ID!
  upvotes: Int!
}

type PhraseToPhraseTranslationVoteStatusOutputRow {
  error: ErrorType!
  vote_status: PhraseToPhraseTranslationVoteStatus
}

type PhraseToPhraseTranslationWithVote {
  downvotes: Int!
  from_phrase_definition: PhraseDefinition!
  phrase_to_phrase_translation_id: ID!
  to_phrase_definition: PhraseDefinition!
  upvotes: Int!
}

type PhraseToPhraseTranslationWithVoteListOutput {
  error: ErrorType!
  phrase_to_phrase_tr_with_vote_list: [PhraseToPhraseTranslationWithVote]!
}

type PhraseToWordTranslation {
  from_phrase_definition: PhraseDefinition!
  phrase_to_word_translation_id: ID!
  to_word_definition: WordDefinition!
}

type PhraseToWordTranslationVoteStatus {
  downvotes: Int!
  phrase_to_word_translation_id: ID!
  upvotes: Int!
}

type PhraseToWordTranslationVoteStatusOutputRow {
  error: ErrorType!
  vote_status: PhraseToWordTranslationVoteStatus
}

type PhraseToWordTranslationWithVote {
  downvotes: Int!
  from_phrase_definition: PhraseDefinition!
  phrase_to_word_translation_id: ID!
  to_word_definition: WordDefinition!
  upvotes: Int!
}

type PhraseToWordTranslationWithVoteListOutput {
  error: ErrorType!
  phrase_to_word_tr_with_vote_list: [PhraseToWordTranslationWithVote]!
}

input PhraseUpsertInput {
  dialect_code: String
  geo_code: String
  language_code: String!
  phraselike_string: String!
}

type PhraseVote {
  last_updated_at: DateTime!
  phrase_id: ID!
  phrase_vote_id: ID!
  user_id: ID!
  vote: Boolean!
}

type PhraseVoteOutput {
  error: ErrorType!
  phrase_vote: PhraseVote
}

type PhraseVoteStatus {
  downvotes: Int!
  phrase_id: ID!
  upvotes: Int!
}

type PhraseVoteStatusOutputRow {
  error: ErrorType!
  vote_status: PhraseVoteStatus
}

input PhraseVoteUpsertInput {
  phrase_id: ID!
  vote: Boolean!
}

type PhraseWithDefinition {
  created_at: DateTime!
  created_by_user: User!
  definition: String
  definition_id: String
  dialect_code: String
  geo_code: String
  language_code: String!
  phrase: String!
  phrase_id: ID!
}

type PhraseWithDefinitions {
  created_at: DateTime!
  created_by_user: User!
  definitions: [PhraseDefinition]!
  dialect_code: String
  downvotes: Int!
  geo_code: String
  language_code: String!
  phrase: String!
  phrase_id: ID!
  upvotes: Int!
}

type PhraseWithVote {
  created_at: DateTime!
  created_by_user: User!
  dialect_code: String
  downvotes: Int!
  geo_code: String
  language_code: String!
  phrase: String!
  phrase_id: ID!
  upvotes: Int!
}

type PhraseWithVoteListConnection {
  edges: [PhraseWithVoteListEdge!]!
  error: ErrorType!
  pageInfo: PageInfo!
}

type PhraseWithVoteListEdge {
  cursor: ID!
  node: PhraseWithDefinitions!
}

type PhraseWithVoteOutput {
  error: ErrorType!
  phrase_with_vote: PhraseWithVote
}

type Post {
  content: String!
  created_at: DateTime!
  created_by_user: User!
  file_type: String
  file_url: ID
  post_id: ID!
}

type PostCountOutput {
  error: ErrorType!
  total: Float!
}

input PostCreateInput {
  content: String!
  file_id: ID
  parent_id: Int!
  parent_table: String!
}

type PostCreateOutput {
  error: ErrorType!
  post: Post
}

input PostReadInput {
  post_id: ID!
}

type PostReadOutput {
  error: ErrorType!
  post: Post
}

input PostsByParentInput {
  parent_id: ID!
  parent_name: String!
}

type PostsByParentOutput {
  error: ErrorType!
  posts: [Post!]
  title: String!
}

type Query {
  file(id: Int!): IFileOutput!
  fileList: [IFile!]!
  fileUploadUrlRequest(input: FileUploadUrlRequest!): FileUploadUrlResponse!
  forumFolderRead(input: ForumFolderReadInput!): ForumFolderReadOutput!
  forumFolders(input: ForumFolderListInput!): ForumFolderListOutput!
  forumRead(input: ForumReadInput!): ForumReadOutput!
  forums: ForumListOutput!
  getAllDocuments(input: GetAllDocumentsInput!): GetAllDocumentsOutput!
  getAllMapsList(after: ID, first: Int, input: GetAllMapsListInput!): MapListConnection!
  getAllRecommendedSiteTextTranslationList: TranslationWithVoteListByLanguageListOutput!
  getAllRecommendedSiteTextTranslationListByLanguage(dialect_code: String, geo_code: String, language_code: String!): TranslationWithVoteListByLanguageOutput!
  getAllSiteTextDefinitions(after: ID, filters: SiteTextDefinitionListFilterInput, first: Int): SiteTextDefinitionListConnection!
  getAllSiteTextLanguageList: SiteTextLanguageListOutput!
  getAllSiteTextLanguageListWithRate: SiteTextLanguageWithTranslationInfoListOutput!
  getAllTranslationFromSiteTextDefinitionID(dialect_code: String, geo_code: String, language_code: String!, site_text_id: ID!, site_text_type_is_word: Boolean!): TranslationWithVoteListOutput!
  getAnswersByQuestionIds(ids: [ID!]!): AnswersOutput!
  getDocument(input: GetDocumentInput!): GetDocumentOutput!
  getDocumentWordEntriesByDocumentId(document_id: ID!): DocumentWordEntriesOutput!
  getFlagsFromRef(parent_id: String!, parent_table: TableNameType!): FlagsOutput!
  getLanguageTranslationInfo(input: TranslatedLanguageInfoInput!): TranslatedLanguageInfoOutput!
  getMapDetails(input: GetMapDetailsInput!): MapDetailsOutput!
  getMapVoteStatus(is_original: Boolean!, map_id: ID!): MapVoteStatusOutputRow!
  getMapWordOrPhraseAsOrigByDefinitionId(input: GetMapWordOrPhraseByDefinitionIdInput!): MapWordOrPhraseAsOrigOutput!
  getOrigMapWordsAndPhrases(after: ID, first: Int, input: GetOrigMapWordsAndPhrasesInput!): MapWordsAndPhrasesConnection!
  getOrigMapWordsAndPhrasesCount(input: GetOrigMapWordsAndPhrasesInput!): MapWordsAndPhrasesCountOutput!
  getOrigMapWordsAndPhrasesPaginated(input: GetOrigMapWordsAndPhrasesInput!, limit: Int, offset: Int): OrigMapWordsAndPhrasesOutput!
  getOrigMapsList(input: GetOrigMapListInput!): GetOrigMapsListOutput!
  getPericopeVoteStatus(pericope_id: ID!): PericopeVoteStatusOutput!
  getPericopiesByDocumentId(document_id: ID!): PericopiesOutput!
  getPhraseDefinitionVoteStatus(phrase_definition_id: ID!): DefinitionVoteStatusOutputRow!
  getPhraseDefinitionsByFlag(after: ID, first: Int, flag_name: FlagType!): PhraseDefinitionListConnection!
  getPhraseDefinitionsByLanguage(input: LanguageInput!): PhraseDefinitionWithVoteListOutput!
  getPhraseDefinitionsByPhraseId(phrase_id: ID!): PhraseDefinitionWithVoteListOutput!
  getPhraseToPhraseTrVoteStatus(phrase_to_phrase_translation_id: ID!): PhraseToPhraseTranslationVoteStatusOutputRow!
  getPhraseToPhraseTranslationsByFromPhraseDefinitionId(from_phrase_definition_id: ID!, langInfo: LanguageInput!): PhraseToPhraseTranslationWithVoteListOutput!
  getPhraseToWordTrVoteStatus(phrase_to_word_translation_id: ID!): PhraseToWordTranslationVoteStatusOutputRow!
  getPhraseToWordTranslationsByFromPhraseDefinitionId(from_phrase_definition_id: ID!, langInfo: LanguageInput!): PhraseToWordTranslationWithVoteListOutput!
  getPhraseVoteStatus(phrase_id: ID!): PhraseVoteStatusOutputRow!
  getPhraseWithVoteById(phrase_id: ID!): PhraseWithVoteOutput!
  getPhrasesByLanguage(after: ID, first: Int, input: LanguageInput!): PhraseWithVoteListConnection!
  getQuestionOnWordRangesByDocumentId(document_id: ID!): QuestionOnWordRangesOutput!
  getQuestionsByRefs(parent_ids: [ID!]!, parent_tables: [TableNameType!]!): QuestionsOutput!
  getRecommendedTranslationFromDefinitionID(from_definition_id: ID!, from_type_is_word: Boolean!, langInfo: LanguageInput!): TranslationWithVoteOutput!
  getRecommendedTranslationFromDefinitionIDs(from_definition_ids: [ID!]!, from_type_is_words: [Boolean!]!, langInfo: LanguageInput!): TranslationWithVoteListOutput!
  getRecommendedTranslationFromSiteTextDefinitionID(dialect_code: String, geo_code: String, language_code: String!, site_text_id: ID!, site_text_type_is_word: Boolean!): TranslationWithVoteOutput!
  getTotalPosts(input: PostsByParentInput!): PostCountOutput!
  getTranslationsByFromDefinitionId(definition_id: ID!, from_definition_type_is_word: Boolean!, langInfo: LanguageInput!): TranslationWithVoteListOutput!
  getWordDefinitionVoteStatus(word_definition_id: ID!): DefinitionVoteStatusOutputRow!
  getWordDefinitionsByFlag(after: ID, first: Int, flag_name: FlagType!): WordDefinitionListConnection!
  getWordDefinitionsByLanguage(input: LanguageInput!): WordDefinitionWithVoteListOutput!
  getWordDefinitionsByWordId(word_id: ID!): WordDefinitionWithVoteListOutput!
  getWordRangesByBeginIds(ids: [ID!]!): WordRangesOutput!
  getWordRangesByDocumentId(id: ID!): WordRangesOutput!
  getWordToPhraseTrVoteStatus(word_to_phrase_translation_id: ID!): WordToPhraseTranslationVoteStatusOutputRow!
  getWordToPhraseTranslationsByFromWordDefinitionId(from_word_definition_id: ID!, langInfo: LanguageInput!): WordToPhraseTranslationWithVoteListOutput!
  getWordToWordTrVoteStatus(word_to_word_translation_id: ID!): WordTrVoteStatusOutputRow!
  getWordToWordTranslationsByFromWordDefinitionId(from_word_definition_id: ID!, langInfo: LanguageInput!): WordToWordTranslationWithVoteListOutput!
  getWordVoteStatus(word_id: ID!): WordVoteStatusOutputRow!
  getWordWithVoteById(word_id: ID!): WordWithVoteOutput!
  getWordsByLanguage(after: ID, first: Int, input: LanguageInput!): WordWithVoteListConnection!
  languagesForBotTranslate(botType: BotType!): LanguageListForBotTranslateOutput!
  loggedInIsAdmin(input: IsAdminIdInput!): IsAdminIdOutput!
  notifications: NotificationListOutput!
  phraseDefinitionRead(id: ID!): PhraseDefinitionOutput!
  phraseRead(input: PhraseReadInput!): PhraseOutput!
  phraseToPhraseTranslationRead(id: ID!): PhraseToPhraseTranslationOutput!
  phraseVoteRead(id: ID!): PhraseVoteOutput!
  postReadResolver(input: PostReadInput!): PostReadOutput!
  postsByParent(input: PostsByParentInput!): PostsByParentOutput!
  readAnswers(ids: [ID!]!): AnswersOutput!
  readPericopies(ids: [ID!]!): PericopiesOutput!
  readQuestionItems(ids: [ID!]!): QuestionItemsOutput!
  readQuestions(ids: [ID!]!): QuestionsOutput!
  readWordRanges(ids: [ID!]!): WordRangesOutput!
  siteTextPhraseDefinitionRead(id: String!): SiteTextPhraseDefinitionOutput!
  siteTextWordDefinitionRead(id: String!): SiteTextWordDefinitionOutput!
  threadRead(input: ThreadReadInput!): ThreadReadOutput!
  threads(input: ThreadListInput!): ThreadListOutput!
  userReadResolver(input: UserReadInput!): UserReadOutput!
  wordDefinitionRead(id: ID!): WordDefinitionOutput!
  wordRead(input: WordReadInput!): WordOutput!
  wordToPhraseTranslationRead(id: ID!): WordToPhraseTranslationOutput!
  wordToWordTranslationRead(id: ID!): WordToWordTranslationOutput!
  wordVoteRead(id: ID!): WordVoteOutput!
}

type Question {
  created_at: DateTime!
  created_by: String!
  parent_id: String!
  parent_table: TableNameType!
  question: String!
  question_id: ID!
  question_items: [QuestionItem!]!
  question_type_is_multiselect: Boolean!
}

type QuestionItem {
  item: String!
  question_item_id: ID!
}

type QuestionItemsOutput {
  error: ErrorType!
  question_items: [QuestionItem]!
}

type QuestionOnWordRange {
  begin: DocumentWordEntry!
  created_at: DateTime!
  created_by: String!
  end: DocumentWordEntry!
  parent_id: String!
  parent_table: TableNameType!
  question: String!
  question_id: ID!
  question_items: [QuestionItem!]!
  question_type_is_multiselect: Boolean!
}

type QuestionOnWordRangesOutput {
  error: ErrorType!
  questions: [QuestionOnWordRange]!
}

input QuestionUpsertInput {
  parent_id: Int!
  parent_table: TableNameType!
  question: String!
  question_items: [String!]!
  question_type_is_multiselect: Boolean!
}

type QuestionsOutput {
  error: ErrorType!
  questions: [Question]!
}

input RegisterInput {
  avatar: String!
  email: String!
  password: String!
}

type RegisterOutput {
  error: ErrorType!
  session: Session
}

input ResetEmailRequestInput {
  email: String!
}

type ResetEmailRequestOutput {
  error: ErrorType!
}

type Session {
  avatar: String!
  avatar_url: String
  token: String!
  user_id: ID!
}

union SiteTextDefinition = SiteTextPhraseDefinition | SiteTextWordDefinition

type SiteTextDefinitionEdge {
  cursor: ID!
  node: SiteTextDefinition!
}

type SiteTextDefinitionListConnection {
  edges: [SiteTextDefinitionEdge!]!
  error: ErrorType!
  pageInfo: PageInfo!
}

input SiteTextDefinitionListFilterInput {
  filter: String
  isSortDescending: Boolean
  onlyNotTranslated: Boolean
  onlyTranslated: Boolean
  quickFilter: String
  targetLanguage: LanguageInput
}

type SiteTextDefinitionOutput {
  error: ErrorType!
  site_text_definition: SiteTextDefinition
}

type SiteTextLanguage {
  dialect_code: String
  geo_code: String
  language_code: String!
}

type SiteTextLanguageListOutput {
  error: ErrorType!
  site_text_language_list: [SiteTextLanguage!]
}

type SiteTextLanguageWithTranslationInfo {
  dialect_code: String
  geo_code: String
  language_code: String!
  total_count: Int!
  translated_count: Int!
}

type SiteTextLanguageWithTranslationInfoListOutput {
  error: ErrorType!
  site_text_language_with_translation_info_list: [SiteTextLanguageWithTranslationInfo]!
}

type SiteTextPhraseDefinition {
  phrase_definition: PhraseDefinition!
  site_text_id: ID!
}

type SiteTextPhraseDefinitionEdge {
  cursor: ID!
  node: SiteTextPhraseDefinition!
}

type SiteTextPhraseDefinitionOutput {
  error: ErrorType!
  site_text_phrase_definition: SiteTextPhraseDefinition
}

input SiteTextTranslationUpsertInput {
  definitionlike_string: String!
  dialect_code: String
  geo_code: String
  is_word_definition: Boolean!
  language_code: String!
  site_text_id: ID!
  translationlike_string: String!
}

input SiteTextTranslationsFromInput {
  from_definition_id: ID!
  from_type_is_word: Boolean!
}

input SiteTextTranslationsToInput {
  definitionlike_string: String!
  dialect_code: String
  geo_code: String
  language_code: String!
  translationlike_string: String!
}

input SiteTextUpsertInput {
  definitionlike_string: String!
  dialect_code: String
  geo_code: String
  language_code: String!
  siteTextlike_string: String!
}

type SiteTextWordDefinition {
  site_text_id: ID!
  word_definition: WordDefinition!
}

type SiteTextWordDefinitionEdge {
  cursor: ID!
  node: SiteTextWordDefinition!
}

type SiteTextWordDefinitionOutput {
  error: ErrorType!
  site_text_word_definition: SiteTextWordDefinition
}

input StartZipMapDownloadInput {
  language: LanguageInput!
}

type StartZipMapOutput {
  error: ErrorType!
}

type Subscription {
  TranslationReport: TranslateAllWordsAndPhrasesByBotResult!
  ZipMapReport: ZipMapResult!
}

enum SubscriptionStatus {
  Completed
  Error
  Progressing
}

enum TableNameType {
  document_word_entries
  documents
  original_maps
  pericopies
  phrase_definitions
  phrase_to_phrase_translations
  phrase_to_word_translations
  phrases
  translated_maps
  word_definitions
  word_ranges
  word_to_phrase_translations
  word_to_word_translations
  words
}

type TextyDocument {
  dialect_code: String
  document_id: ID!
  file_id: String!
  file_name: String!
  file_url: String!
  geo_code: String
  language_code: String!
}

input TextyDocumentInput {
  dialect_code: String
  file_id: String!
  geo_code: String
  language_code: String!
}

type Thread {
  name: String!
  thread_id: ID!
}

input ThreadDeleteInput {
  thread_id: ID!
}

type ThreadDeleteOutput {
  error: ErrorType!
  thread_id: ID!
}

input ThreadListInput {
  folder_id: ID!
}

type ThreadListOutput {
  error: ErrorType!
  threads: [Thread!]!
}

input ThreadReadInput {
  thread_id: ID!
}

type ThreadReadOutput {
  error: ErrorType!
  thread: Thread
}

input ThreadUpsertInput {
  folder_id: ID!
  name: String!
  thread_id: ID
}

type ThreadUpsertOutput {
  error: ErrorType!
  thread: Thread
}

input ToDefinitionInput {
  definition: String!
  dialect_code: String
  geo_code: String
  is_type_word: Boolean!
  language_code: String!
  word_or_phrase: String!
}

type TranslateAllWordsAndPhrasesByBotOutput {
  error: ErrorType!
  result: TranslateAllWordsAndPhrasesByBotResult
}

type TranslateAllWordsAndPhrasesByBotResult {
  completed: Int
  errors: [String!]
  message: String
  requestedCharacters: Int!
  status: String
  total: Int
  totalPhraseCount: Int!
  totalWordCount: Int!
  translatedPhraseCount: Int!
  translatedWordCount: Int!
}

input TranslatedLanguageInfoInput {
  fromLanguageCode: ID!
  toLanguageCode: ID
}

type TranslatedLanguageInfoOutput {
  deeplTranslateTotalLangCount: Int!
  error: ErrorType!
  googleTranslateTotalLangCount: Int!
  liltTranslateTotalLangCount: Int!
  smartcatTranslateTotalLangCount: Int!
  totalPhraseCount: Int!
  totalWordCount: Int!
  translatedMissingPhraseCount: Int
  translatedMissingWordCount: Int
}

union Translation = PhraseToPhraseTranslation | PhraseToWordTranslation | WordToPhraseTranslation | WordToWordTranslation

type TranslationOutput {
  error: ErrorType!
  translation: Translation
}

union TranslationVoteStatus = PhraseToPhraseTranslationVoteStatus | PhraseToWordTranslationVoteStatus | WordToPhraseTranslationVoteStatus | WordTrVoteStatus

type TranslationVoteStatusOutputRow {
  error: ErrorType!
  translation_vote_status: TranslationVoteStatus
}

union TranslationWithVote = PhraseToPhraseTranslationWithVote | PhraseToWordTranslationWithVote | WordToPhraseTranslationWithVote | WordToWordTranslationWithVote

type TranslationWithVoteListByLanguage {
  dialect_code: String
  geo_code: String
  language_code: String!
  translation_with_vote_list: [TranslationWithVote]!
}

type TranslationWithVoteListByLanguageListOutput {
  error: ErrorType!
  translation_with_vote_list_by_language_list: [TranslationWithVoteListByLanguage!]
}

type TranslationWithVoteListByLanguageOutput {
  error: ErrorType!
  translation_with_vote_list_by_language: TranslationWithVoteListByLanguage!
}

type TranslationWithVoteListOutput {
  error: ErrorType!
  translation_with_vote_list: [TranslationWithVote]!
}

type TranslationWithVoteOutput {
  error: ErrorType!
  translation_with_vote: TranslationWithVote
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  avatar: String!
  avatar_url: String
  is_bot: Boolean!
  user_id: ID!
}

input UserReadInput {
  user_id: ID!
}

type UserReadOutput {
  error: ErrorType!
  user: User
}

type Version {
  content: String!
  created_at: DateTime!
  license_title: String!
  post_id: Int!
  version_id: ID!
}

input VersionCreateInput {
  content: String!
  license_title: String!
  post_id: Int!
}

type VersionCreateOutput {
  error: ErrorType!
  version: Version
}

type Word {
  created_at: DateTime!
  created_by_user: User!
  dialect_code: String
  geo_code: String
  language_code: String!
  word: String!
  word_id: ID!
}

type WordDefinition {
  created_at: DateTime!
  created_by_user: User!
  definition: String!
  word: Word!
  word_definition_id: ID!
}

type WordDefinitionListConnection {
  edges: [WordDefinitionListEdge!]!
  error: ErrorType!
  pageInfo: PageInfo!
}

type WordDefinitionListEdge {
  cursor: ID!
  node: WordDefinition!
}

type WordDefinitionOutput {
  error: ErrorType!
  word_definition: WordDefinition
}

input WordDefinitionUpsertInput {
  definition: String!
  word_id: ID!
}

type WordDefinitionVote {
  last_updated_at: DateTime!
  user_id: ID!
  vote: Boolean!
  word_definition_id: ID!
  word_definitions_vote_id: ID!
}

type WordDefinitionWithVote {
  created_at: DateTime!
  created_by_user: User!
  definition: String!
  downvotes: Int!
  upvotes: Int!
  word: Word!
  word_definition_id: ID!
}

type WordDefinitionWithVoteListOutput {
  error: ErrorType!
  word_definition_list: [WordDefinitionWithVote]!
}

type WordOutput {
  error: ErrorType!
  word: Word
}

type WordRange {
  begin: DocumentWordEntry!
  end: DocumentWordEntry!
  word_range_id: ID!
}

input WordRangeUpsertInput {
  begin_document_word_entry_id: String!
  end_document_word_entry_id: String!
}

type WordRangesOutput {
  error: ErrorType!
  word_ranges: [WordRange]!
}

input WordReadInput {
  word_id: ID!
}

type WordToPhraseTranslation {
  from_word_definition: WordDefinition!
  to_phrase_definition: PhraseDefinition!
  word_to_phrase_translation_id: ID!
}

type WordToPhraseTranslationOutput {
  error: ErrorType!
  word_to_phrase_translation: WordToPhraseTranslation
}

input WordToPhraseTranslationUpsertInput {
  from_word_definition_id: ID!
  to_phrase_definition_id: ID!
}

type WordToPhraseTranslationVoteStatus {
  downvotes: Int!
  upvotes: Int!
  word_to_phrase_translation_id: ID!
}

type WordToPhraseTranslationVoteStatusOutputRow {
  error: ErrorType!
  vote_status: WordToPhraseTranslationVoteStatus
}

type WordToPhraseTranslationWithVote {
  downvotes: Int!
  from_word_definition: WordDefinition!
  to_phrase_definition: PhraseDefinition!
  upvotes: Int!
  word_to_phrase_translation_id: ID!
}

type WordToPhraseTranslationWithVoteListOutput {
  error: ErrorType!
  word_to_phrase_tr_with_vote_list: [WordToPhraseTranslationWithVote]!
}

type WordToWordTranslation {
  from_word_definition: WordDefinition!
  to_word_definition: WordDefinition!
  word_to_word_translation_id: ID!
}

type WordToWordTranslationOutput {
  error: ErrorType!
  word_to_word_translation: WordToWordTranslation
}

input WordToWordTranslationUpsertInput {
  from_word_definition_id: ID!
  to_word_definition_id: ID!
}

type WordToWordTranslationWithVote {
  downvotes: Int!
  from_word_definition: WordDefinition!
  to_word_definition: WordDefinition!
  upvotes: Int!
  word_to_word_translation_id: ID!
}

type WordToWordTranslationWithVoteListOutput {
  error: ErrorType!
  word_to_word_tr_with_vote_list: [WordToWordTranslationWithVote]!
}

type WordTrVoteStatus {
  downvotes: Int!
  upvotes: Int!
  word_to_word_translation_id: String!
}

type WordTrVoteStatusOutputRow {
  error: ErrorType!
  vote_status: WordTrVoteStatus
}

input WordUpsertInput {
  dialect_code: String
  geo_code: String
  language_code: String!
  wordlike_string: String!
}

type WordVote {
  last_updated_at: DateTime!
  user_id: ID!
  vote: Boolean!
  word_id: ID!
  words_vote_id: ID!
}

type WordVoteOutput {
  error: ErrorType!
  word_vote: WordVote
}

type WordVoteStatus {
  downvotes: Int!
  upvotes: Int!
  word_id: ID!
}

type WordVoteStatusOutputRow {
  error: ErrorType!
  vote_status: WordVoteStatus
}

input WordVoteUpsertInput {
  vote: Boolean!
  word_id: ID!
}

type WordWithDefinition {
  created_at: DateTime!
  created_by_user: User!
  definition: String
  definition_id: String
  dialect_code: String
  geo_code: String
  language_code: String!
  word: String!
  word_id: ID!
}

type WordWithDefinitions {
  created_at: DateTime!
  created_by_user: User!
  definitions: [WordDefinition]!
  dialect_code: String
  downvotes: Int!
  geo_code: String
  language_code: String!
  upvotes: Int!
  word: String!
  word_id: ID!
}

type WordWithVote {
  created_at: DateTime!
  created_by_user: User!
  dialect_code: String
  downvotes: Int!
  geo_code: String
  language_code: String!
  upvotes: Int!
  word: String!
  word_id: ID!
}

type WordWithVoteListConnection {
  edges: [WordWithVoteListEdge!]!
  error: ErrorType!
  pageInfo: PageInfo!
}

type WordWithVoteListEdge {
  cursor: ID!
  node: WordWithDefinitions!
}

type WordWithVoteOutput {
  error: ErrorType!
  word_with_vote: WordWithVote
}

type WordlikeString {
  wordlike_string: String!
  wordlike_string_id: ID!
}

type ZipMapResult {
  errors: [String!]
  message: String
  resultZipUrl: String
  status: SubscriptionStatus!
}